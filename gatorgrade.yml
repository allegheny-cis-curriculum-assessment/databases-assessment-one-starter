
setup: |
  echo "üêä Attempt to install ruff"
  echo "üêä Will not re-install if already installed"
  pipx install ruff
---

# Assessment of Honor Code {{{

- README.md:
    - description: Ensure that the README.md file exists inside of the root of the GitHub repository
      check: ConfirmFileExists
    - description: Delete the phrase 'Add Your Name Here' and add your own name as an Honor Code pledge in README.md
      check: MatchFileFragment
      objectives: "DSLO3,SELO4"
      options:
        fragment: "Add Your Name Here"
        count: 0
        exact: true
    - description: Retype the every word in the Honor Code pledge in README.md
      check: MatchFileFragment
      objectives: "DSLO3,SELO4"
      options:
        fragment: "I adhered to the Allegheny College Honor Code while completing this assessment."
        count: 2
        exact: true

# }}}

# Assessment of Program Characteristics {{{

# perform checks on the assessment.py file
- source/assessment.py:
    - description: Ensure that assessment.py file exists in the source/ directory
      check: ConfirmFileExists
      objectives: "DSLO3,SELO3"
    - description: Complete all TODOs, remove the TODO markers, and rewrite comments for assessment.py
      check: MatchFileFragment
      objectives: "DSLO3,SELO3"
      options:
        fragment: TODO
        count: 0
        exact: true

# run a command: ruff check with default settings found in .ruff.toml file
- description: Ensure that the source code follows an industry-standard programming rules using the command 'ruff check'
  objectives: "DSLO3,SELO3"
  command: ruff check source/assessment.py

# run a command: ruff format with default settings found in .ruff.toml file
- description: Ensure that the source code adheres to an industry-standard format using the command 'ruff format'
  objectives: "DSLO3,SELO3"
  command: ruff format source/assessment.py --check

# }}}

# Assessment Based on Program Output {{{

- description: "SQLite3 tables contain appropriate amount of data in db/news_data.db"
  check: MatchCommandFragment
  objectives: "SELO2,DSLO1"
  options:
    command: "sqlite3 db/news_data.db '.selftest'"
    fragment: "0 errors out of 3 tests"
    count: 1
    exact: true 

- description: "SQLite3 correct tables exist in database db/news_data.db"
  check: MatchCommandFragment
  objectives: "SELO2,DSLO1"
  options:
    command: "sqlite3 db/news_data.db '.tables'"
    fragment: "authors   metadata  selftest  stories"
    count: 1
    exact: true

- description: "Run connection function and confirm database connection OK"
  check: MatchCommandFragment
  objectives: "SELO2,SELO3,SELO4,DSLO3"
  options:
    command: "python source/assessment.py"
    fragment: 'Connected / True'
    count: 1
    exact: true

- description: "Execute query for and confirm the correct ID for most prolific author"
  check: MatchCommandFragment
  objectives: "SELO2,SELO3,SELO4,DSLO3"
  options:
    command: "python source/assessment.py"
    fragment: '46 / True'
    count: 1
    exact: true

- description: "Execute query for stories written by a single author and confirm correct output"
  check: MatchCommandFragment
  objectives: "SELO2,SELO3,SELO4,DSLO3"
  options:
    command: "python source/assessment.py"
    fragment: '2016-03-01 [Arts & Entertainment] "Arts & Entertainment: Cultural Evolution" Isaiah Foster'
    count: 1
    exact: true

- description: "Execute query to retrieve author name by ID, and confirm answer is correct"
  check: MatchCommandFragment
  objectives: "SELO2,SELO3,SELO4,DSLO3"
  options:
    command: "python source/assessment.py"
    fragment: "Isaiah Foster / True"
    count: 1
    exact: true

- description: "Execute query for and confirm author status update of single author record by author ID to ACTIVE"
  check: MatchCommandFragment
  objectives: "SELO2,SELO3,SELO4,DSLO3"
  options:
    command: "python source/assessment.py"
    fragment: "{'author': 46, 'status': 'ACTIVE', 'updated': True} / True"
    count: 1
    exact: true

# }}}
